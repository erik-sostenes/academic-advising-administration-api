// Code generated by mockery v2.13.1. DO NOT EDIT.

package repositorymocks

import (
	context "context"

	model "github.com/itsoeh/academic-advising-administration-api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// TeacherStorer is an autogenerated mock type for the TeacherStorer type
type TeacherStorer struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, subjectId, universityCourseId
func (_m *TeacherStorer) Find(ctx context.Context, subjectId string, universityCourseId string) (model.TeacherCards, error) {
	ret := _m.Called(ctx, subjectId, universityCourseId)

	var r0 model.TeacherCards
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.TeacherCards); ok {
		r0 = rf(ctx, subjectId, universityCourseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.TeacherCards)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, subjectId, universityCourseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTeacherStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeacherStorer creates a new instance of TeacherStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeacherStorer(t mockConstructorTestingTNewTeacherStorer) *TeacherStorer {
	mock := &TeacherStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
